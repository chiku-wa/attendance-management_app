name: RSpec

# master,developmentブランチへのPush時に実行
on:
  # 以下の条件をトリガーに動作させる
  # 1. 所定のブランチに対してPushされた時
  push:
    branches: [master, development]
  # 2. masterブランチにプルリクされた時
  pull_request:
    branches: [master]

jobs:
  run_spec:
    name: Run spec

    # ジョブを実行する仮想マシンを選択
    # 例：
    # macos-latest
    # windows-latest
    runs-on: ubuntu-latest

    # Gitのコミットメッセージの先頭に「ga skip」がある場合は、GithubActionsをスキップさせる
    # ※GithubActionsの無料枠を節約するため
    if: "!contains(github.event.head_commit.message, 'ga skip')"
    services:
      # PostgreSQLの設定
      postgres:
        image: postgres:13
        # database.ymlに設定されている、テスト用ユーザの接続情報を指定する
        env:
          POSTGRES_DB: kintai_test
          POSTGRES_USER: kintai_test_user
          POSTGRES_PASSWORD: Kintai@test
        # オプションはGithubActionsの公式ドキュメントより引用
        # https://docs.github.com/ja/actions/using-containerized-services/creating-postgresql-service-containers
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      # 標準的なチェックアウトアクションを実行(https://docs.github.com/ja/actions/configuring-and-managing-workflows/configuring-a-workflow#using-the-checkout-action)
      - uses: actions/checkout@v2
      # 使用するRubyバージョンを指定する
      - name: Set up Ruby
        uses: ruby/setup-ruby@477b21f02be01bcb8030d50f37cfec92bfa615b6
        with:
          ruby-version: 2.6.6
          bundler-cache: true
        env:
          # テスト環境であることを明示
          RAILS_ENV: test
          # PostgreSQLサービスコンテナとの通信に使われるホスト名
          # ※services 直下の名前「postgres」と同じにすること
          POSTGRES_HOST: postgres
          # デフォルトのPostgreSQLポート
          POSTGRES_PORT: 5432
      - name: Confirm startup of PostgreSQL
        run: |
          pg_isready

      # 必要なライブラリをキャッシュし、GitHubActionsの動作を高速化させる。
      # [path]
      # キャッシュとして保存＆復元するディレクトリのパス。
      # 絶対パスか、プロジェクトのルートディレクトリからの相対パスを指定する。
      #
      # [key]
      # キャッシュを保存＆復元するためのキー。最大512文字。
      #
      # [restore-keys]
      # キャッシュ復元時に[key]に完全に一致するキャッシュが存在しなかったときに使われるキーのリスト(任意、必須ではない)
      #
      # なお、度作成したキャッシュの上書きはできないため、キャッシュキーの先頭にバージョン名など
      # を入れておくと、バージョン番号を変更するだけでキャッシュをまとめて無効化できるため推奨。
      # 例：「actions/cache@v1」→「actions/cache@v2」に変更すると、キャッシュを使ず動作する。
      #     ※OSと連動させたいなら`${{ runner.os }}`と記せば良い。
      # Gemfileをキャッシュ
      - uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ env.cache-version }}-bundle-${{ hashFiles('**/Gemfile.lock') }}
          # keyで定義したキーを前方一致で検索して復元
          restore-keys: ${{ env.cache-version }}-bundle-

      # yarnをキャッシュ(参考：https://github.com/actions/cache/blob/main/examples.md#node---yarn)
      # キャッシュを行う前に、キャッシュディレクトリを取得する
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ env.cache-version }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ env.cache-version }}-yarn-

      # Bunlerインストール
      - name: Bundle install
        run: |
          gem install bundler
          bundle config path vendor/bundle
          bundle install --quiet --jobs 4 --retry 3
      # yarnインストール
      - name: yarn install
        run: |
          yarn install --check-files

      # テスト実行
      - name: Test with Rspec
        # gemをインストールし、テストを実行する
        run: |
          bin/rails db:create
          bin/rails db:migrate
          bundle exec rspec
